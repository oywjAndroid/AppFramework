1.关于Android反编译的工具以及指导：
--- 博文：http://blog.csdn.net/vipzjyno1/article/details/21039349/
--- 反编译工具:<apktool> 、<dex2jar>、<jd-gui>

2.混淆规则：
    原文链接：http://www.jianshu.com/p/7436a1a32891

    -keep class cn.hadcn.test.** --- 表示把本包和所含子包下的类名都保持
    -keep class cn.hadcn.test.*  --- 表示只是保持该包下的类名，而子包下的类名还是会被混淆
    -keep class cn.hadcn.test.* {*;} --- 既保持类名，又保持里面的内容不被混淆
    -keep public class * extends android.app.Activity -- 避免所有继承Activity的类被混淆
    -keepclassmembers class cc.ninty.chat.ui.fragment.ScriptFragment$JavaScriptInterface {
       public *;
    } --- 表示保持ScriptFragment内部类JavaScriptInterface中的所有public内容不被混淆。

    如果一个类中你不希望保持全部内容不被混淆，而只是希望保护类下的特定内容，就可以使用
    <init>;     //匹配所有构造器
    <fields>;   //匹配所有域
    <methods>;  //匹配所有方法方法
    你还可以在<fields>或<methods>前面加上private 、public、native等来进一步指定不被混淆的内容，如
    -keep class cn.hadcn.test.One {
        public <methods>;
    }
    类和类成员 	-keep 	-keepnames
    仅类成员 	-keepclassmembers 	-keepclassmembernames
    如果拥有某成员，保留类和类成员 	-keepclasseswithmembers 	-keepclasseswithmembernames
    ---
    发布一款应用除了设minifyEnabled为ture，你也应该设置zipAlignEnabled为true，
    像Google Play强制要求开发者上传的应用必须是经过zipAlign的，
    zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗。
    ---

3.多渠道打包：
    3.1 什么是多渠道打包：我们发布应用之后需要统计各个渠道的用户下载量，所以才有了多渠道打包。

    3.2 友盟多渠道打包
        原理：通过给人工给某个APK设定一个Channel Id(用于标识某一个渠道，其值由自定义指定。如：豌豆荚 -- wandoujia)，
        也就是说每打包一个apk文件它会有唯一的channel id让你投放到指定的应用市场。

        关于如何进行多渠道打包操作，可参考以下博文：
            http://blog.csdn.net/ljchlx/article/details/43059467
            http://blog.csdn.net/maosidiaoxian/article/details/42000913

    3.3 执行打包操作：

        1.配置签名文件：
                // 可通过Project Structure中进行配置，配置之后就会生成这样一段代码
                1.1 signingConfigs {
                        release {
                            keyAlias '***'
                            keyPassword '*******'
                            storeFile file('*:/****_keystore/qrcode.jks')
                            storePassword '*******'
                        }
                    }
                1.2 在buildTypes中进行关联
                    buildTypes {
                            release {
                                signingConfig signingConfigs.release
                            ｝
                    ｝

        2.配置两个Gradle环境变量：
            2.1 GRADLE_HOME:"C:\Users\Android\.gradle\wrapper\dists\gradle-2.8-all\ah86jmo43de9lfa8xg9ux3c4h\gradle-2.8"

            2.2 在PATH变量中配置:"C:\Users\Android\.gradle\wrapper\dists\gradle-2.8-all\ah86jmo43de9lfa8xg9ux3c4h\gradle-2.8\bin"

        3.在Terminal中执行Gradle打包命令:

            gradle assembleRelease -- 生成多渠道正式包

            gradle assembleWandouJieRelease -- 生成某个渠道正式包


4.混淆模板：

      # 1.基本混淆规则
      # 代码混淆压缩比，在0~7之间，默认为5,一般不下需要修改
      -optimizationpasses 5
      # 混淆时不使用大小写混合，混淆后的类名为小写
      -dontusemixedcaseclassnames

      # 指定不去忽略非公共的库的类
      -dontskipnonpubliclibraryclasses

      # 指定不去忽略非公共的库的类的成员
      -dontskipnonpubliclibraryclassmembers

      # 不做预检验，preverify是proguard的四个步骤之一
      -dontpreverify

      # 有了verbose这句话，混淆后就会生成映射文件 包含有类名->混淆后类名的映射关系
      -verbose
      -printmapping priguardMapping.txt
      -optimizations !code/simplification/artithmetic,!field/*,!class/merging/*

      # 保护代码中的Annotation不被混淆
      # 这在JSON实体映射时非常重要，比如fastJson
      -keepattributes Annotation

      # 避免混淆泛型
      # 这在JSON实体映射时非常重要，比如fastJson
      -keepattributes Signature

      # 抛出异常时保留代码行号
      -keepattributes SourceFile,LineNumberTable

      ## 2.需要保留的东西
      ## 保留所有的本地native方法不被混淆
      -keepclasseswithmembernames class * {
          native <methods>;
      }

      # 保留了继承自Activity、Application这些类的子类
      # 因为这些子类有可能被外部调用
      # 比如第一行就保证了所有Activity的子类不要被混淆
      -keep public class * extends android.app.Activity
      -keep public class * extends android.app.Application
      -keep public class * extends android.app.Service
      -keep public class * extends android.content.BroadcastReceiver
      -keep public class * extends android.content.ContentProvider
      -keep public class * extends android.app.backup.BackupAgentHelper
      -keep public class * extends android.preference.Preference
      -keep public class * extends android.view.View
      -keep public class com.android.vending.licensing.ILicensingService

      # 保留Activity中的方法参数是view的方法，
      # 从而我们在layout里面编写onClick就不会影响
      -keepclassmembers class * extends android.app.Activity {
          public void * (android.view.View);
      }

      # 枚举类不能被混淆
      -keepclassmembers enum * {
          public static **[] values();
          public static ** valueOf(java.lang.String);
      }

      # 保留自定义控件(继承自View)不能被混淆
      -keep public class * extends android.view.View {
          public <init>(android.content.Context);
          public <init>(android.content.Context, android.util.AttributeSet);
          public <init>(android.content.Context, android.util.AttributeSet, int);
          public void set*(***);
          *** get* ();
      }

      # 保留Parcelable序列化的类不能被混淆
      -keep class * implements android.os.Parcelable{
          public static final android.os.Parcelable$Creator *;
      }

      # 保留Serializable 序列化的类不被混淆
      -keepclassmembers class * implements java.io.Serializable {
         static final long serialVersionUID;
         private static final java.io.ObjectStreamField[] serialPersistentFields;
         !static !transient <fields>;
         private void writeObject(java.io.ObjectOutputStream);
         private void readObject(java.io.ObjectInputStream);
         java.lang.Object writeReplace();
         java.lang.Object readResolve();
      }

      # 对R文件下的所有类及其方法，都不能被混淆
      -keepclassmembers class **.R$* {
          *;
      }

      # 对于带有回调函数onXXEvent的，不能混淆
      -keepclassmembers class * {
          void *(**On*Event);
      }
      // 2.特殊
      # 保留实体类
      -keep class cn.domarket.qrcode.model.bean.**{
          *;
      }
      -keep class cn.domarket.qrcode.model.holder.**{
          *;
      }

      #如果有引用v4包可以添加下面这行
      -keep class android.support.v4.** { *; }
      -keep public class * extends android.support.v4.**
      -keep public class * extends android.app.Fragment
      #如果引用了v4或者v7包，可以忽略警告，因为用不到android.support
      -dontwarn android.support.**

      # 3.第三方库混淆
      # butterknife
      -keep class butterknife.** { *; }
      -dontwarn butterknife.internal.**
      -keep class **$$ViewBinder { *; }
      -keepclasseswithmembernames class * {
          @butterknife.* <fields>;
      }
      -keepclasseswithmembernames class * {
          @butterknife.* <methods>;
      }

      # retrofit2
      -dontwarn retrofit2.**
      -keep class retrofit2.** { *; }
      -keepattributes Signature
      -keepattributes Exceptions

      # okhttp3
      -dontwarn com.squareup.okhttp3.**
      -keep class com.squareup.okhttp3.** { *;}
      -dontwarn okio.**

      # freemarker
      -dontwarn freemarker.**
      -keep class freemarker.** {*;}

      # gson
      -keep class com.google.gson.stream.** { *; }
      -keepattributes EnclosingMethod

      # glide
      -keep public class * implements com.bumptech.glide.module.GlideModule
      -keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
        **[] $VALUES;
        public *;
      }

      # rxjava
      -dontwarn sun.misc.**
      -keepclassmembers class rx.internal.util.unsafe.*ArrayQueue*Field* {
         long producerIndex;
         long consumerIndex;
      }
      -keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef {
          rx.internal.util.atomic.LinkedQueueNode producerNode;
      }
      -keepclassmembers class rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef {
          rx.internal.util.atomic.LinkedQueueNode consumerNode;
      }

      # greenDAO 3
      #-dontwarn org.greenrobot.greendao.**
      #-keep class org.greenrobot.greendao.* {*;}

      -keepclassmembers class * extends org.greenrobot.greendao.AbstractDao {
      public static java.lang.String TABLENAME;
      }
      -keep class **$Properties
      # If you do not use SQLCipher:
      -dontwarn org.greenrobot.greendao.database.**

